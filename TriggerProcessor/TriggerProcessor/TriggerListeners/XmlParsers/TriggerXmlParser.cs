using System;
using System.Collections.Generic;
using System.Linq;
using System.Xml.Linq;
using System.Xml.XPath;

namespace TriggerProcessor.TriggerListeners.XmlParsers
{
    /// <summary>
    /// Parses the XML generated by a SQL Server trigger into the specified row type.
    /// </summary>
    public interface ITriggerXmlParser<TRow>
    {
        TriggerData<TRow> ParseTriggerXml(XDocument body);
    }

    /// <summary>
    /// Parses the XML generated by a SQL Server trigger into the specified row type.
    /// </summary>
    public abstract class TriggerXmlParser<TRow> : ITriggerXmlParser<TRow>
    {
        public TriggerData<TRow> ParseTriggerXml(XDocument body)
        {
            var root = body.Root;

            if (root == null)
            {
                throw new Exception("Document must have a root element.");
            }

            var inserted = root.XPathSelectElements("Inserted/row").Select(ParseRow).ToList();
            var deleted = root.XPathSelectElements("Deleted/row").Select(ParseRow).ToList();

            var comparer = new RowComparer(this);

            var insertedRows = inserted.Except(deleted, comparer);
            var deletedRows = deleted.Except(inserted, comparer);

            var modifiedRows = from i in inserted
                               join d in deleted on GetKey(i) equals GetKey(d)
                               select new RowChange<TRow> { OriginalValue = i, ModifiedValue = d };

            return new TriggerData<TRow>
            {
                Application = root.XPathSelectElement("Application").Value,
                Date = DateTime.Parse(root.XPathSelectElement("Date").Value),
                TransactionId = root.XPathSelectElement("TransactionId").Value,
                User = root.XPathSelectElement("User").Value,
                Inserted = insertedRows.ToList(),
                Deleted = deletedRows.ToList(),
                Modified = modifiedRows.ToList(),
            };
        }

        protected abstract string GetKey(TRow row);

        protected abstract TRow ParseRow(XElement row);

        private class RowComparer : IEqualityComparer<TRow>
        {
            private readonly TriggerXmlParser<TRow> _parent;

            public RowComparer(TriggerXmlParser<TRow> parent)
            {
                _parent = parent;
            }

            public bool Equals(TRow x, TRow y) => Equals(_parent.GetKey(x), _parent.GetKey(y));

            public int GetHashCode(TRow obj) => _parent.GetKey(obj)?.GetHashCode() ?? 0;
        }
    }

    public class RowChange<TRow>
    {
        public TRow OriginalValue { get; set; }
        public TRow ModifiedValue { get; set; }
    }

    public class TriggerData<TRow>
    {
        /// <summary>
        /// The Application Name set in the connection that made the change, if applicable.
        /// </summary>
        public string Application { get; set; }

        /// <summary>
        /// The date the change was made.
        /// </summary>
        public DateTime Date { get; set; }

        /// <summary>
        /// A unique identifier for the database transaction that made the change.
        /// </summary>
        public string TransactionId { get; set; }

        /// <summary>
        /// The name of the user that made the change.
        /// </summary>
        public string User { get; set; }

        /// <summary>
        /// Any rows that were inserted into the database as a result of the change that was made.
        /// </summary>
        public IReadOnlyList<TRow> Inserted { get; set; }

        /// <summary>
        /// Any rows that were deleted from the database as a result of the change that was made.
        /// </summary>
        public IReadOnlyList<TRow> Deleted { get; set; }

        /// <summary>
        /// Any rows that were modified as a result of the change that was made.
        /// </summary>
        public IReadOnlyList<RowChange<TRow>> Modified { get; set; }
    }

    public static class XElementExtensions
    {
        public static bool? ParseBoolean(this XAttribute value) => string.IsNullOrEmpty(value?.Value) ? (bool?)null : bool.Parse(value.Value);
        public static byte? ParseByte(this XAttribute value) => string.IsNullOrEmpty(value?.Value) ? (byte?)null : byte.Parse(value.Value);
        public static DateTime? ParseDate(this XAttribute value) => string.IsNullOrEmpty(value?.Value) ? (DateTime?)null : DateTime.Parse(value.Value);
        public static Guid? ParseGuid(this XAttribute value) => string.IsNullOrEmpty(value?.Value) ? (Guid?)null : Guid.Parse(value.Value);
        public static int? ParseInt(this XAttribute value) => string.IsNullOrEmpty(value?.Value) ? (int?)null : int.Parse(value.Value);
        public static short? ParseShort(this XAttribute value) => string.IsNullOrEmpty(value?.Value) ? (short?)null : short.Parse(value.Value);
    }
}